import streamlit as st
import requests
from typing import Optional
import tempfile
from langfuse_ne import LangfuseHandler

def setup_page():
    """
        h√†m t·∫°o layout cho streamlit
    """
    if 'page_configured' not in st.session_state:
        print("[LOG]: page_configured")
        st.set_page_config(page_title="üê±‚Äçüèç Supter Chatbot", layout="centered")
        st.session_state.page_configured = True

    st.header("Multi Agent Chatbot" )
    st.sidebar.header("Tu·ª≥ ch·ªçn", divider='rainbow')
    hide_menu_style = """
            <style>
            #MainMenu {visibility: hidden;}
            </style>
            """ 
    st.markdown(hide_menu_style, unsafe_allow_html=True)        # Xo√° menu ch·ªçn m·∫∑c ƒë·ªãnh g√≥c tr√™n b√™n ph·∫£i c·ªßa st

def get_choice():
    """
        h√†m t·∫°o sidebar radio ƒë·ªÉ ch·ªçn ki·ªÉu ƒë·ªëi tho·∫°i
    """
    choice = st.sidebar.radio("Ki·ªÉu ƒë·ªëi tho·∫°i:", ["Normal Chat",
                                                "Chat with a PDF"])
    return choice

def get_session():
    """
        h√†m tr·∫£ v·ªÅ danh s√°ch id c·ªßa selected_session user ch·ªçn ·ªü sidebar
    """
    sessions =  st.session_state.langfuse.fetch_sesions()
    if not sessions:
        st.sidebar.warning("Kh√¥ng c√≥ session n√†o ƒë∆∞·ª£c l∆∞u h√¥m nay.")
        return None
    session_list_id = [session.id for session in sessions]
    session_options = [(None, "Cu·ªôc H·ªôi Tho·∫°i M·ªõi")]  
    for session_id in session_list_id:
        traces = st.session_state.langfuse.fetch_traces(session_id)
        if len(traces) != 0:
            session_options.append((session_id, traces[0].input))

    selected_session = st.sidebar.selectbox(
        label="L·ªãch s·ª≠ h·ªèi ƒë√°p",
        options=session_options,
        format_func=lambda x: x[1]
    )
    return selected_session[0]

def get_clear():
    """
        H√†m xo√° m√†n h√¨nh ui
    """
    clear_button=st.sidebar.button("Xo√° m√†n h√¨nh", key="clear")
    return clear_button

def get_clear():
    """
        H√†m xo√° m√†n h√¨nh ui
    """
    clear_button=st.sidebar.button("Xo√° m√†n h√¨nh", key="clear")
    return clear_button

def reload_achat(session_id_selected: Optional[str]=None):
    """
        H√†m x·ª≠ l√Ω m√†n h√¨nh l·ªãch s·ª≠ chat ƒë·ªëi v·ªõi m·ªói session
    """
    if "session_id" not in st.session_state:
        st.session_state.session_id = None  # ƒê·∫£m b·∫£o bi·∫øn t·ªìn t·∫°i

    if session_id_selected is not None and session_id_selected != st.session_state.session_id:      # ƒê√¢y l√† tr∆∞·ªùng h·ª£p ƒëang chat v·ªõi session c≈©
        st.session_state.session_id = session_id_selected  
        st.session_state.messages = []

        traces = st.session_state.langfuse.fetch_traces(session_id=session_id_selected)
        for trace in traces:
            st.session_state.messages.append({"role": "user", "content": trace.input})
            st.session_state.messages.append({"role": "assistant", "content": trace.output})
        for message in st.session_state.messages:
            with st.chat_message(message['role'],  avatar="ü§ì" if message['role'] == "assistant" else "ü§¨"):
                st.markdown(message['content'])
    elif session_id_selected == st.session_state.session_id:                                       # ƒê√¢y l√† tr∆∞·ªùng h·ª£p ƒëang chat trong session m·ªõi
        if 'messages' not in st.session_state:
            st.session_state.messages = []
        for message in st.session_state.messages:
            with st.chat_message(message['role'],  avatar="ü§ì" if message['role'] == "assistant" else "ü§¨"):
                st.markdown(message['content'])
    elif session_id_selected != st.session_state.session_id:    
        st.session_state.session_id = session_id_selected                                           # ƒê√¢y l√† tr∆∞·ªùng h·ª£p ƒëang chat v·ªõi session c≈© mu·ªën qua session m·ªõi th√¨ reset l·∫°i ui
        st.session_state.messages = []

        
def chat_processing(prompt: str, session_id_choiced: str = None, tmp_file_path: str=None):
    """
        input:
            prompt: str |   C√¢u h·ªèi ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng.
            session_id_choiced: str | key session_id_choiced ƒëang th·ª±c hi·ªán ƒë·ªëi tho·∫°i.
            tmp_file_path: str| ƒë∆∞·ªùng d·∫´n t·∫°m th·ªùi t·ªõi file pdf ƒë√£ ƒë∆∞·ª£c upload

    """
    with st.chat_message(name="user", avatar="ü§¨"):
        if 'Th√¥ng tin:' in prompt:
            prompt_media = prompt
            prompt_media = prompt_media.split("Th√¥ng tin:")[0]
            prompt_media = prompt_media.replace('C√¢u h·ªèi:', " ").strip()
            st.markdown(prompt_media)
        else:
            st.markdown(prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message(name="assistant", avatar="ü§ì"):
        API_URL="http://127.0.0.1:9999/chat"
        payload = {
            "prompt": prompt,
            "session_id_choiced": session_id_choiced,
            "tmp_file_path": tmp_file_path
        } 
        response = requests.post(url=API_URL, json=payload)
        # print('\n\nresponse.json(): ', response.json())
        if response.status_code == 200:
            st.markdown(response.json())
        else:
            st.markdown("Unknown Messages")
    st.session_state.messages.append({"role": "assistant", "content": response.json()})

def main():
    choice = get_choice()
    session_id_choiced = get_session()
    
    if choice == "Normal Chat":
        clear = get_clear()
        if clear:
            if "messages" in st.session_state:
                del st.session_state.messages
        reload_achat(session_id_choiced)

        prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi v√†o ƒë√¢y...")
        if prompt and prompt.strip():
           chat_processing(prompt, session_id_choiced=session_id_choiced, tmp_file_path=None)
            
    elif choice == "Chat with a PDF":
        st.subheader("Chat with a PDF")
        uploaded_files = st.file_uploader("Ch·ªçn file pdf ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªôi tho·∫°i", type=['pdf'], accept_multiple_files=False)
        clear = get_clear()
        if clear:
            if "messages" in st.session_state:
                del st.session_state.messages
        reload_achat(session_id_choiced)
        if uploaded_files:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                tmp_file.write(uploaded_files.read())
                tmp_file_path = tmp_file.name  # L∆∞u l·∫°i ƒë∆∞·ªùng d·∫´n ƒë·ªÉ s·ª≠ d·ª•ng sau
            prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi v√†o ƒë√¢y...")
            if prompt and prompt.strip():
                if 'file' not in st.session_state or st.session_state.file != uploaded_files.name:      # Ch·ªâ parser file khi l√† l·∫ßn ƒë√¢u ho·∫∑c l√† file m·ªõi
                    st.session_state.file = uploaded_files.name
                    API_URL="http://127.0.0.1:9999/parser_index"
                    payload={
                        'tmp_file_path': tmp_file_path
                    }
                    response = requests.post(url=API_URL, json=payload)
                    if response.status_code != 200:
                        print("L√µi trong qu√° tr√¨nh PARSER INDEX")
                chat_processing(prompt=prompt, session_id_choiced=session_id_choiced, tmp_file_path=tmp_file_path)

if __name__ == "__main__":
    print("[LOG]: CHAY LAI STREAMLIT")
    if 'langfuse' not in st.session_state:
        print("[LOG]: langfuse session_state")
        st.session_state.langfuse = LangfuseHandler()
    
    setup_page()
    main()
